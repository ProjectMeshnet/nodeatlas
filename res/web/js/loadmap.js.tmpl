var options = {
	"tileserver": "{{.Map.Tileserver}}",
	"center": new L.LatLng({{.Map.Center.Latitude}},
						   {{.Map.Center.Longitude}}),
	"zoom": {{.Map.Zoom}}
}

var cachedMaps = {};
var nodes = [];

var firstLoad = true;
var attribution = '<a href="https://github.com/ProjectMeshnet/nodeatlas">NodeAtlas {{.Version}}</a> â€” Map data {{.Map.Attribution}}';

var nodelayer = new L.MarkerClusterGroup({
	spiderfyOnMaxZoom: true,
	showCoverageOnHover: false,
	zoomToBoundsOnClick: true,
	maxClusterRadius: {{.Map.ClusterRadius}}
});

var newUser = new L.LayerGroup();
var tilelayer = L.tileLayer(options.tileserver, {styleId: 22677, attribution: attribution});

var map = new L.Map('map', {
	center: options.center,
	zoom: options.zoom,
	maxZoom: 16,
	minZoom: 2,
	layers: [tilelayer, nodelayer, newUser]
});

$(document).ready(function() {

	addJSFiles();
	
	$.ajaxSetup({cache:true});
	
	$('#addme').tooltip();
	$('#distance').tooltip();
	
	// this handles loading the child nodes now
	loadChildMaps();
		
	$('#search').keyup(function() {
		// TODO display these in some fashion
		var searchResults = search(nodes, $(this).val());
	});
	
	map.addControl(new L.Control.Scale());
	
	// If you're at /verify/xxx
	var key = verifying();
	if (key != '') {
		verifyNode(key);
	}
});

$(window).resize(function () {
	$('#map').css('height', ($(window).height()));
}).resize();

function geoLocate() {
	map.locate({setView: true, maxZoom: 17});
	map.on('locationfound', function() {
		map.off('locationfound');
	});
}

function loadChildMaps() {
	$.getJSON("/api/child_maps", function(response) {
		for (i in response.data) {
			mapObj = response.data[i]
			cachedMaps[mapObj.ID] = {
				"name": mapObj.Name,
				"hostname": mapObj.Hostname
			}
		}
		addNodes();
	});
}

function addNodes() {
	$.getJSON("/api/all?geojson", function (response) {
		// TODO: Check for errors here (response.error)
		L.geoJson(response.data, {
			pointToLayer: createMarker
		}).addTo(nodelayer).on('click', nodeInfoClick);
		//.on('mouseover', nodeInfoMouseOver).on('mouseout', nodeInfoMouseOut)

		for (var i in response.data.features) {
			nodes[i] = {
				id: response.data.features[i].id,
				properties: response.data.features[i].properties
			};

		}
	});
}

function createMarker(feature, latlng) {
	var html = '<div class="node">';
	html +=  '<h4>'+feature.properties.OwnerName+'&nbsp;<button class="btn btn-mini btn-info" id="sendMessage">Message</button>';
	html += '&nbsp;<button class="btn btn-mini btn-success" disabled>Edit</button></h4>';
	html += '<div class="text-center"><a href="/node/'+feature.id+'" class="btn btn-small btn-primary">'+feature.id+'</a></div><hr>';
	
if (feature.properties.SourceID) {
	html += '<div class="property">Source</div>';
		if (cachedMaps[feature.properties.SourceID] != null) {
			sourceMap = cachedMaps[feature.properties.SourceID];
			html += '<div class="more">Retrieved from <a href="'+sourceMap.hostname+'/node/'+feature.id+'">'+(sourceMap.name ? sourceMap.name : 'another map')+'</a>.</div>';
		} else {
			html += '<div class="more">Retrieved from another map.</div>';
		}
	}

	if (feature.properties.Details) {
		html += '<div class="property">Details</div><div class="more">'+feature.properties.Details+'</div>';
	}
	if (feature.properties.Contact) {
		html += '<div class="property">Contact</div><div class="more">'+feature.properties.Contact+'</div>';
	}
	if (feature.properties.PGP) {
		html += '<div class="property">PGP</div><div class="more">'+(feature.properties.PGP).toUpperCase()+'</div>';
	}
	
	html += '</div>';
	
	var p = L.popup();
	p.setLatLng(latlng);
	p.setContent(html);
	
	
	// Use the status to set an appropriate icon and effects.
	var icon = inactiveNodeIcon;
	if (feature.properties.Status & STATUS_ACTIVE > 0) {
		icon = activeNodeIcon;
	}
		
	// If it's a VPS, show the VPS icon instead of the active/inactive icon
	if (!(feature.properties.Status & STATUS_PHYSICAL)) {
		icon = VPSIcon;
	}
	
	// Create the Marker with options set above.
	var m = L.marker(latlng, {icon: icon}).bindPopup(html);
	
	// If we have /node/xxx then center the map on it
	if (nodexxx(feature.id)) {
		map.setView(latlng, 8);		
	}
		
	return m;
}

function nodexxx(node) {
	var path = window.location.pathname.split('/');
	if (path[1] != "node") return false;
	return (path[2] == node);
}

function verifying() {
	var path = window.location.pathname.split('/');
	if (path[1] != "verify") return '';
	else return path[2];
}

function onMapClick(e) {
	var markerLocation = new L.LatLng(e.latlng.lat, e.latlng.lng);
	var marker = new L.Marker(markerLocation, {icon: newUserIcon, draggable: true});
	newUser.clearLayers();
	newUser.addLayer(marker);
	
	$('#wrap').append(getForm(e));
	
	$('.node').remove();
	
	$('#inputform').animate({
		top: '60px'
	}, 500);
	
	//marker.bindPopup(getForm(e)).openPopup();
	$('#name').focus();
}

function addJSFiles() {
	var html = '<script type="text/javascript" src="/js/distance.js"></script>';
	html += '<script type="text/javascript" src="/js/icon.js"></script>';
	html += '<script type="text/javascript" src="/js/status.js"></script>';
	html += '<script type="text/javascript" src="/js/common.js"></script>';
	html += '<script type="text/javascript" src="/js/search.js"></script>';
	html += '<script type="text/javascript" src="/js/captcha.js"></script>';
	html += '<script type="text/javascript" src="/js/node.js"></script>';
	html += '<script type="text/javascript" src="/js/verify.js"></script>';
	$('head').append(html);
}
